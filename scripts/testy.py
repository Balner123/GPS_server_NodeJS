import requests
import json
import time
from datetime import datetime, timezone

# --- Configuration ---
# Replace with your server's actual URL
SERVER_URL = "https://lotr-system.xyz"
API_ENDPOINT = "/api/devices/input"

# IMPORTANT: Replace with the actual Device ID you registered on your server.
# This should match the 'deviceID' generated by your hardware (e.g., last 10 chars of MAC).
DEVICE_ID = "YOUR_DEVICE_ID_HERE"
DEVICE_NAME = "Simulated_GPS_Device"

# --- Sample GPS Data (you can modify these) ---
# Prague coordinates for simulation
LATITUDE = 50.08804
LONGITUDE = 14.42076
SPEED_KMPH = 15.5
ALTITUDE_METERS = 250.0
ACCURACY_HDOP = 1.8
SATELLITES = 10

def send_gps_data(device_id, device_name, lat, lon, speed, alt, accuracy, sats):
    """
    Constructs and sends a GPS data payload to the server.
    """
    # Get current UTC timestamp in ISO 8601 format
    timestamp = datetime.now(timezone.utc).isoformat(timespec='seconds').replace('+00:00', 'Z')

    payload = {
        "device": device_id,
        "name": device_name,
        "latitude": lat,
        "longitude": lon,
        "speed": speed,
        "altitude": alt,
        "accuracy": accuracy,
        "satellites": sats,
        "timestamp": timestamp
    }

    headers = {
        "Content-Type": "application/json"
    }

    full_url = f"{SERVER_URL}{API_ENDPOINT}"

    print(f"Sending data to: {full_url}")
    print(f"Payload: {json.dumps(payload, indent=2)}")

    try:
        response = requests.post(full_url, headers=headers, data=json.dumps(payload))
        response.raise_for_status() # Raise an exception for HTTP errors (4xx or 5xx)

        print(f"\nServer Response Status Code: {response.status_code}")
        print(f"Server Response Body: {json.dumps(response.json(), indent=2)}")

        # Check for 'registered' status from server (as per device's logic)
        if "registered" in response.json() and response.json()["registered"] == False:
            print("\n--- WARNING: Server indicated device is NOT registered. ---")
        
        # Check for 'sleep_interval'
        if "sleep_interval" in response.json():
            print(f"Server suggested sleep interval: {response.json()['sleep_interval']} seconds.")

    except requests.exceptions.ConnectionError as e:
        print(f"\nERROR: Could not connect to the server. Is it running at {SERVER_URL}? Details: {e}")
    except requests.exceptions.Timeout as e:
        print(f"\nERROR: The request timed out. Details: {e}")
    except requests.exceptions.RequestException as e:
        print(f"\nERROR: An unexpected error occurred during the request. Details: {e}")
    except json.JSONDecodeError:
        print(f"\nERROR: Could not decode JSON from server response. Response text: {response.text}")
    except Exception as e:
        print(f"\nAn unexpected error occurred: {e}")

if __name__ == "__main__":
    print("--- Starting GPS Data Simulation ---")
    send_gps_data(DEVICE_ID, DEVICE_NAME, LATITUDE, LONGITUDE, SPEED_KMPH, ALTITUDE_METERS, ACCURACY_HDOP, SATELLITES)
    print("\n--- Simulation Finished ---")
